<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time>1970-01-01 00:00:00</entered_time>
        <max_drift/>
        <name>SkillUP - Verify Intern Manager</name>
        <offset/>
        <offset_type>0</offset_type>
        <run_as display_value="System Administrator">6816f79cc0a8016401c5a33be04be441</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period/>
        <run_start>2025-08-04 00:34:28</run_start>
        <run_time>1970-01-01 00:00:00</run_time>
        <run_type>daily</run_type>
        <script><![CDATA[function verifyInternHireDays(){
	var gr_team = new GlideRecord('x_1805432_mock_ski_team'); 
	gr_team.addQuery('position', 'intern');
	gr_team.query();

	while(gr_team.next()){
		var gdt_hire_date = new GlideDateTime(gr_team.hire_date);
		var gdt_actual_date = new GlideDateTime();

		var date_difference = GlideDateTime.subtract(gdt_hire_date, gdt_actual_date);
		var diff_days = date_difference.getDayPart();


		//Aqui deve ter so o retorno se diff days é true/false e a chamada das outras funções deve ser feita fora da função verifyInternHireDays
		if(diff_days > 90){
			var manager_is_monitor = true;

			if(!gr_team.manager.nil()){
				manager_is_monitor = verifyInternActualManagerPosition(gr_team.manager);
			}
			
			if (manager_is_monitor){
				var new_manager = searchInternNewManager(gr_team.department);
				updateInterManager(gr_team.sys_id, new_manager);
			}
		}
	}
}

function verifyInternActualManagerPosition(manager){
	var gr_view_actual_manager_position = new GlideRecord('x_1805432_mock_ski_team');
	gr_view_actual_manager_position.addQuery('sys_id', manager);
	gr_view_actual_manager_position.query();
	

	if(gr_view_actual_manager_position.next()){
		if(gr_view_actual_manager_position.position != 'manager'){
			return true;
		}
		return false;
	}
}

function searchInternNewManager(intern_department){
	var gr_new_manager = new GlideRecord('x_1805432_mock_ski_team');

	gr_new_manager.addQuery('department', intern_department);
	gr_new_manager.addQuery('position', 'manager');

	gr_new_manager.query();

	if(gr_new_manager.next()) {
		return gr_new_manager.sys_id;
	}
}

function updateInterManager(intern_sys_id, inter_manager){
		var gr_update_inter = new GlideRecord('x_1805432_mock_ski_team');
		
		if (gr_update_inter.get(intern_sys_id)) {
			gr_update_inter.manager = inter_manager;
			gr_update_inter.update();
		}
}

verifyInternHireDays();]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-08-04 01:18:02</sys_created_on>
        <sys_id>6e28eb8b830f661053e9cb29feaad304</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>SkillUP - Verify Intern Manager</sys_name>
        <sys_package display_value="Mock SkillUp" source="x_1805432_mock_ski">4f410f888303625053e9cb29feaad323</sys_package>
        <sys_policy/>
        <sys_scope display_value="Mock SkillUp">4f410f888303625053e9cb29feaad323</sys_scope>
        <sys_update_name>sysauto_script_6e28eb8b830f661053e9cb29feaad304</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-08-04 01:37:28</sys_updated_on>
        <time_zone>GMT</time_zone>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
